# -*- coding: utf-8 -*-

import asyncio
import socket
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging
import os

from config import *

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('log/bot.log'),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logging.StreamHandler()              # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def error_bot(update: types.Update, exception: Exception):
    print(f'Update: {update} \nException: {exception}')
    await bot.send_message(chat_id=CHAT_ID, text='–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏!')
    return True

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
SERVERS = [
    {"name": "MyNameServer", "ip": "my_ip"},
    {"name": "MyNameServer", "ip": "my_ip"},
]

# –ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è
PORT = 443

# –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ (–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω) –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
server_status = {server["ip"]: {"status": True, "response_time": None} for server in SERVERS}

async def check_server(server):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç (443) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º socket.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - "status": True/False (–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    - "response_time": –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö) –∏–ª–∏ None, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    ip = server["ip"]

    try:
        start_time = asyncio.get_event_loop().time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with socket.create_connection((ip, PORT), timeout=5) as conn:
            response_time = round((asyncio.get_event_loop().time() - start_time) * 1000)  # –í—Ä–µ–º—è –≤ –º—Å
            conn.close()
            return {"ip": ip, "status": True, "response_time": response_time}
    except (socket.timeout, socket.error):
        return {"ip": ip, "status": False, "response_time": None}


async def check_servers_availability():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞.
    """
    global server_status

    tasks = [check_server(server) for server in SERVERS]  # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    results = await asyncio.gather(*tasks)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

    for result in results:
        ip = result["ip"]
        if result["status"]:
            # –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
            if not server_status[ip]["status"]:  # –ï—Å–ª–∏ –æ–Ω —Ä–∞–Ω–µ–µ –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                await bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚úÖ –°–µ—Ä–≤–µ—Ä {next(s['name'] for s in SERVERS if s['ip'] == ip)} ({ip}) —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']} –º—Å",
                    disable_notification=True  # –¢–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
            server_status[ip] = {"status": True, "response_time": result["response_time"]}
        else:
            # –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if server_status[ip]["status"]:  # –ï—Å–ª–∏ –æ–Ω —Ä–∞–Ω–µ–µ –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
                await bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {next(s['name'] for s in SERVERS if s['ip'] == ip)} ({ip}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!",
                    disable_notification=True  # –¢–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
            server_status[ip] = {"status": False, "response_time": None}


async def scheduled_monitoring():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    """
    while True:
        await check_servers_availability()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    adm = users
    if message.chat.id not in adm:
        await message.answer('–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç, –Ω–µ—Ö—É–π —Ç–µ–±–µ –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å.\n\n–í–∞—à ID: '+ str(message.chat.id))
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏, –≤—Å—ë –ø—É—Ç—ë–º üòâ')

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
@dp.message_handler(commands=["status"])
async def send_status(message: types.Message):
    adm = users
    if message.chat.id not in adm:
        await message.answer('–Ø –∂–µ —Å–∫–∞–∑–∞–ª, –Ω–µ—Ö—É–π —Ç–µ–±–µ –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å!')
    else:
        global server_status
        status_message = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"
        for server in SERVERS:
            ip = server["ip"]
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if server_status[ip]["status"] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            response_time = (
                f"‚è± {server_status[ip]['response_time']} –º—Å"
                if server_status[ip]["response_time"] is not None
                else "N/A"
            )
            status_message += f"{server['name']} ({ip}): {status} ({response_time})\n"

        await message.answer(status_message)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    adm = users
    if message.chat.id not in adm:
        await message.answer('–Ø –∂–µ —Å–∫–∞–∑–∞–ª, –Ω–µ—Ö—É–π —Ç–µ–±–µ –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å!')
    else:
        await message.answer('–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /status')


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled_monitoring())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
